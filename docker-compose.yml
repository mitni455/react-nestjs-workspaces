version: '3.7'

services:

    traefik:
        image : traefik:1.7
        volumes:
            - ./traefik.toml:/etc/traefik/traefik.toml
            - /var/run/docker.sock:/var/run/docker.sock
            - traefikTmp:/tmp
        ports:
            - 80:80
            - 8080:8080

    


     #   ___ _ _         _      
     #  / __| (_)___ _ _| |_ ___
     # | (__| | / -_) ' \  _(_-<
     #  \___|_|_\___|_||_\__/__/    
    client-playbook:
        build:
            context: ../clients/client_playbook
            dockerfile: Dockerfile.dev
        environment:
            PORT: 80
            NODE_ENV: "docker"
            MICROSERVICE_PLAYBOOK_URL : http://localhost:5000/api/
            MICROSERVICE_PLAYBOOK_SOCKET_URL: http://localhost:5000
            MICROSERVICE_STORAGE_URL : http://ms.storage.kitset.localhost/
            MICROSERVICE_WEBSSH_URL : http://localhost:2221/
            MICROSERVICE_FOLDER_WATCHER_URL: http://localhost:2001/
            MICROSERVICE_SSH_SERVICE_PRIVATE_URL : "microservice-ubuntu-ssh"
            MICROSERVICE_SSH_SERVICE_PRIVATE_URL_PORT : 22
            MICROSERVICE_SSH_SERVICE_PRIVATE_USERNAME : "username"
            MICROSERVICE_SSH_SERVICE_PRIVATE_PASSWORD : "UseS3cr3t!"
            MICROSERVICE_TIMELINE_SOCKET_URL: "http://localhost:3002"
            KEYCLOAK_AUTH_ENABLED : "true"
            IDP: "AUTH0"
            IDP_URL: "http://staging.auth.master-class.io/"
            REACT_APP_AUTH0_CLIENT_ID: "IcWLF3TzU6eulika6gHsxWvqNpn76UPX"
            REACT_APP_AUTH0_DOMAIN: "http://master-class.auth0.com"
            REACT_APP_AUTH0_AUDIENCE: http://localhost:5000/api
            REACT_APP_AUTH0_REDIRECT_URI: http://localhost:3000
            REACT_APP_SERVER_BASE_URL: http://localhost:5000
        expose: 
            - 80
        ports:
            - 8081:80
        # labels:
        #     traefik.80.port: "80"
        #     traefik.80.frontend.rule : "Host:client.playbook.kitset.localhost"
        volumes:
            - ../clients/client_playbook:/app
            - clientPlaybookNodeModules:/app/node_modules/
        depends_on:
            - traefik
            - microservice-playbook


     #  __  __ _                            _           
     # |  \/  (_)__ _ _ ___ ___ ___ _ ___ _(_)__ ___ ___
     # | |\/| | / _| '_/ _ (_-</ -_) '_\ V / / _/ -_|_-<
     # |_|  |_|_\__|_| \___/__/\___|_|  \_/|_\__\___/__/





    microservice-playbook:
        container_name: microservice-playbook 
        build:
            context: ../microservices/microservice_playbook/api
            target: development
        volumes:
            - ../microservices/microservice_playbook/api:/usr/src/app
            - microservice_playbook_node_modules:/usr/src/app/node_modules
        ports:
            - 5000:5000
        command: yarn run start:dev
        env_file:
            - ../microservices/microservice_playbook/api/.env 
        environment: 
            AUTH0_DOMAIN: master-class.auth0.com
            AUTH0_AUDIENCE: http://localhost:5000/api
            DB_CONNECTION_TOKEN: DATABASE_MONGO_CONNECTION
            DB_URI: mongodb://mongo:27017/microservice_playbook_db
            REDIS_CONNECTION_TOKEN: REDIS_CONNECTION
            REDIS_URL: redis://redis
            RABBIT_URL: amqp://rabbitmq-management
            RABBIT_MS_STORAGE_SERVICE_NAME: MS_STORAGE_SERVICE
            RABBIT_MS_STORAGE_PRODUCE_QUEUE: "ms_storage_clone_repo_queue"
            RABBIT_MS_STORAGE_CONSUME_QUEUE: "ms_storage_clone_repo_reply_queue"
            SOCKET_IO_URI: http://localhost:5000

            # DB_CONNECTION_TOKEN: DATABASE_MONGO_CONNECTION
            # DB_URI: mongodb+srv://root:Mon092500!@monorepo-mongo-cluster-tsvjn.mongodb.net/microservice_playbook_db?retryWrites=true&w=majority
            # REDIS_CONNECTION_TOKEN: REDIS_CONNECTION
            # REDIS_URL : redis://oss-redis-master-class-io:RedS3cr3t!@redis-13674.c51.ap-southeast-2-1.ec2.cloud.redislabs.com:13674
            # RABBIT_URL : amqp://pcomkiir:5vQ_-hSiECuGaI0ttEVZk9b4KTLb-PAf@vulture.rmq.cloudamqp.com/pcomkiir
            # RABBIT_MS_STORAGE_SERVICE_NAME: MS_STORAGE_SERVICE
            # RABBIT_MS_STORAGE_PRODUCE_QUEUE: ms_storage_clone_repo_queue
            # RABBIT_MS_STORAGE_CONSUME_QUEUE: ms_storage_clone_repo_reply_queue
            # SOCKET_IO_URI: http://localhost:5000

            PORT: 5000
        depends_on:
            - mongo 
            - rabbitmq-management
            - redis
            # - microservice-storage


    rabbitmq-management:
        container_name: rabbit_management
        image: rabbitmq:3-management
        ports:
            - 15672:15672
        
    redis:
        container_name: redis
        image: redis:5
        ports:
            - 6379:6379
        volumes:
            - redis:/data

    postgresql:
        image: postgres:11
        ports:
            - 5432:5432
        environment:
            POSTGRES_USER: kitset
            POSTGRES_PASSWORD: pos092500
            PGDATA: /kitset/pgdata
        volumes:
            - monorepo-postgresql:/kitset/

    mysql:
        image: mysql:5.7
        ports:
            - 3306:3306
        environment:
            MYSQL_ROOT_PASSWORD: mys092500
        command: mysqld --ssl=0
        volumes:
            - monorepo-mysql:/var/lib/mysql

    mongo:
        container_name: mongo
        image: mongo:4.2 
        ports: 
            - 27017:27017
        expose:
            - 27017
        # environment:
            # MONGO_INITDB_ROOT_USERNAME: root
            # MONGO_INITDB_ROOT_PASSWORD: root
        volumes:
            - mongoDB:/data/db
            - mongoConfigDB:/data/configdb



volumes:
    monorepo-mysql:
    monorepo-postgresql:
    monorepo-openldap-db:
    monorepo-openldap-config:
    monorepo-openldap-ui:
    mongoDB:
    mongoConfigDB:
    traefikTmp:
    clientPlaybookNodeModules:
    msWebsshNodeModules:
    msStorageNodeModules:
    postgres_data:
    microservice_playbook_node_modules:
    redis: